pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = 'dockerhub_cred'
        DOCKER_HUB_REPO_FRONTEND = 'sragzhran/frontend_depi_project'  
        DOCKER_HUB_REPO_BACKEND = 'sragzhran/backend_depi_project'    
        IMAGE_TAG = "V${env.BUILD_NUMBER}" 
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')  
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'github-cred', url: 'https://github.com/SragZhran73/DEPI-DevOps-FP-G3.git']]
                )
            }
        }

        stage('Build Front & Back Images') {
            steps {
                script {
                    // Build frontend and backend images with version tag
                    docker.build("${DOCKER_HUB_REPO_FRONTEND}:${IMAGE_TAG}", "app/frontend")
                    docker.build("${DOCKER_HUB_REPO_BACKEND}:${IMAGE_TAG}", "app/backend")
                }
            }
        }

        stage('Login and Push Images to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub and push images
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        
                        // Push versioned images
                        docker.image("${DOCKER_HUB_REPO_FRONTEND}:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_HUB_REPO_BACKEND}:${IMAGE_TAG}").push()
                        
                        // Tag and push the latest images
                        docker.image("${DOCKER_HUB_REPO_FRONTEND}:${IMAGE_TAG}").tag('latest')
                        docker.image("${DOCKER_HUB_REPO_BACKEND}:${IMAGE_TAG}").tag('latest')
                        
                        docker.image("${DOCKER_HUB_REPO_FRONTEND}:latest").push()
                        docker.image("${DOCKER_HUB_REPO_BACKEND}:latest").push()
                        
                        echo "Successfully pushed frontend and backend images (versioned and latest) to Docker Hub"
                    }
                }
            }
        }

        stage('Terraform apply') {
            steps {
                dir('Terraform') {  // Change directory to where your main.tf file is located
                    script {
                        sh '''
                        terraform init
                        terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Terraform destroy') {
            steps {
                dir('Terraform') {  // Change directory to where your main.tf file is located
                    script {
                        sh '''
                        terraform init
                        sleep 240
                        terraform destroy -auto-approve
                        '''
                    }
                }
            }
        }


    }
}
